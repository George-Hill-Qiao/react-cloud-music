{"ast":null,"code":"var _jsxFileName = \"/Volumes/F/66/55/src/application/Singers/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from \"react\";\nimport LevelItem from \"baseUI/level-item\";\nimport { categoryTypes, alphaTypes } from \"api/config\";\nimport { NavContainer, List, ListItem, ListContainer } from \"./style\";\nimport Scroll from \"baseUI/scroll\";\nimport { getSingerList, getHotSingerList, changeEnterLoading, changePageCount, refreshMoreHotSingerList, refreshMoreSingerList, changePullUpLoading, changePullDownLoading } from \"./store/actionCreators\";\nimport { connect } from \"react-redux\";\nimport Loading from \"baseUI/loading/index\";\nimport LazyLoad, { forceCheck } from \"react-lazyload\";\nimport { CHANGE_CATEGORY, CHANGE_ALPHA, CategoryDataContext, Data } from \"./cache-data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Singers(props) {\n  _s();\n\n  const {\n    singerList,\n    enterLoading,\n    pullUpLoading,\n    pullDownLoading,\n    pageCount\n  } = props;\n  const {\n    updateDispatch,\n    getHotSingerDispatch,\n    pullUpRefreshDispatch,\n    pullDownRefreshDispatch\n  } = props; //const [category, setCategory] = useState(\"\");//分类\n  //const [alpha, setAlpha] = useState(\"\");//字母\n\n  const {\n    data,\n    dispatch\n  } = useContext(CategoryDataContext); // 获取到category和alpha的值\n\n  const {\n    category,\n    alpha\n  } = data.toJS(); //immutable对象换成JS对象\n  //处理字母的方法\n\n  let handleUpdateAlpha = val => {\n    //setAlpha(val)\n    dispatch({\n      type: CHANGE_ALPHA,\n      data: val\n    });\n    updateDispatch(category, val);\n  }; //处理分类的方法\n\n\n  let handleUpdateCategory = val => {\n    //setCategory(val)\n    dispatch({\n      type: CHANGE_CATEGORY,\n      data: val\n    });\n    updateDispatch(val, alpha);\n  }; //初始化页面--热门歌手渲染页面\n\n\n  useEffect(() => {\n    if (singerList.size === 0) getHotSingerDispatch();\n  }, []); //渲染歌手列表\n\n  const renderSingerList = () => {\n    const singerListJS = singerList ? singerList.toJS() : [];\n    return /*#__PURE__*/_jsxDEV(List, {\n      children: singerListJS.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"img_wrapper\",\n            children: /*#__PURE__*/_jsxDEV(LazyLoad, {\n              placeholder: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"https://markdownit-images.oss-cn-beijing.aliyuncs.com/music/singer.png\",\n                width: \"100%\",\n                height: \"100%\",\n                alt: \"singers-music\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 42\n              }, this),\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: `${item.picUrl}?param=300x300`,\n                width: \"100%\",\n                height: \"100%\",\n                alt: \"singers-music\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 20\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"name\",\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 17\n          }, this)]\n        }, item.accountId + \"\" + index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  }; //处理上拉事件\n\n\n  const handlePullUp = () => {\n    pullUpRefreshDispatch(category, alpha, category === \"\", pageCount);\n  }; // 处理下拉事件\n\n\n  const handlePullDown = () => {\n    pullDownRefreshDispatch(category, alpha);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Data, {\n    children: /*#__PURE__*/_jsxDEV(NavContainer, {\n      children: [/*#__PURE__*/_jsxDEV(LevelItem, {\n        list: categoryTypes,\n        title: \"分类(默认热门):\",\n        handleClick: val => handleUpdateCategory(val),\n        oldVal: category,\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LevelItem, {\n        list: alphaTypes,\n        title: \"首字母：\",\n        handleClick: val => handleUpdateAlpha(val),\n        oldVal: alpha,\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ListContainer, {\n        children: [/*#__PURE__*/_jsxDEV(Scroll, {\n          pullUp: handlePullUp,\n          pullDown: handlePullDown,\n          pullUpLoading: pullUpLoading,\n          pullDownLoading: pullDownLoading,\n          onScroll: forceCheck,\n          children: renderSingerList()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Loading, {\n          show: enterLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n} // 映射Redux 全局的state到组件的props\n\n\n_s(Singers, \"Yu3WSwDPvtUKWDFIw3QA4Aw+HMM=\");\n\n_c = Singers;\n\nconst mapStateToProps = state => ({\n  singerList: state.getIn([\"singers\", \"singerList\"]),\n  enterLoading: state.getIn([\"singers\", \"enterLoading\"]),\n  pullUpLoading: state.getIn([\"singers\", \"pullUpLoading\"]),\n  pullDownLoading: state.getIn([\"singers\", \"pullDownLoading\"]),\n  pageCount: state.getIn([\"singers\", \"pageCount\"])\n}); // 映射dispatch 到 props上\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getHotSingerDispatch() {\n      dispatch(getHotSingerList());\n    },\n\n    updateDispatch(category, alpha) {\n      //更新页面的方法\n      dispatch(changePageCount(0)); //由于改变分类，pageCount清零\n\n      dispatch(changeEnterLoading(true));\n      dispatch(getSingerList(category, alpha));\n    },\n\n    // 滑到底部时刷新的部分\n    pullUpRefreshDispatch(category, alpha, hot, count) {\n      dispatch(changePullUpLoading(true));\n      dispatch(changePageCount(count + 1));\n\n      if (hot) {\n        dispatch(refreshMoreHotSingerList()); //刷新热门歌手\n      } else {\n        dispatch(refreshMoreSingerList(category, alpha)); //刷新分类的列表\n      }\n    },\n\n    // 顶部下拉的时候刷新\n    pullDownRefreshDispatch(category, alpha) {\n      dispatch(changePullDownLoading(true));\n      dispatch(changePageCount(0)); //重新获取数据\n\n      if (category == \"\" && alpha === \"\") {\n        dispatch(getHotSingerList());\n      } else {\n        dispatch(getSingerList(category, alpha));\n      }\n    }\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)( /*#__PURE__*/React.memo(Singers));\n\nvar _c;\n\n$RefreshReg$(_c, \"Singers\");","map":{"version":3,"sources":["/Volumes/F/66/55/src/application/Singers/index.js"],"names":["React","useContext","useEffect","LevelItem","categoryTypes","alphaTypes","NavContainer","List","ListItem","ListContainer","Scroll","getSingerList","getHotSingerList","changeEnterLoading","changePageCount","refreshMoreHotSingerList","refreshMoreSingerList","changePullUpLoading","changePullDownLoading","connect","Loading","LazyLoad","forceCheck","CHANGE_CATEGORY","CHANGE_ALPHA","CategoryDataContext","Data","Singers","props","singerList","enterLoading","pullUpLoading","pullDownLoading","pageCount","updateDispatch","getHotSingerDispatch","pullUpRefreshDispatch","pullDownRefreshDispatch","data","dispatch","category","alpha","toJS","handleUpdateAlpha","val","type","handleUpdateCategory","size","renderSingerList","singerListJS","map","item","index","picUrl","name","accountId","handlePullUp","handlePullDown","mapStateToProps","state","getIn","mapDispatchToProps","hot","count","memo"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport LevelItem from \"baseUI/level-item\";\nimport { categoryTypes, alphaTypes } from \"api/config\";\nimport { NavContainer, List, ListItem, ListContainer } from \"./style\";\nimport Scroll from \"baseUI/scroll\";\nimport { getSingerList, getHotSingerList, changeEnterLoading, changePageCount, refreshMoreHotSingerList,\n   refreshMoreSingerList, changePullUpLoading, changePullDownLoading }\nfrom \"./store/actionCreators\";\nimport { connect } from \"react-redux\";\nimport Loading from \"baseUI/loading/index\";\nimport LazyLoad, { forceCheck } from \"react-lazyload\";\nimport { CHANGE_CATEGORY, CHANGE_ALPHA, CategoryDataContext, Data } from \"./cache-data\";\nfunction Singers(props) {\n  const { singerList, enterLoading, pullUpLoading, pullDownLoading, pageCount } = props;\n  const { updateDispatch,getHotSingerDispatch, pullUpRefreshDispatch, pullDownRefreshDispatch } = props;\n  //const [category, setCategory] = useState(\"\");//分类\n  //const [alpha, setAlpha] = useState(\"\");//字母\n  const { data, dispatch } = useContext(CategoryDataContext);\n  // 获取到category和alpha的值\n  const { category, alpha } = data.toJS();//immutable对象换成JS对象\n\n  //处理字母的方法\n  let handleUpdateAlpha = (val) => {\n    //setAlpha(val)\n    dispatch({ type: CHANGE_ALPHA, data: val })\n    updateDispatch(category, val)\n  }\n  //处理分类的方法\n  let handleUpdateCategory = (val) => {\n    //setCategory(val)\n    dispatch({ type: CHANGE_CATEGORY, data: val })\n    updateDispatch(val, alpha)\n  }\n  //初始化页面--热门歌手渲染页面\n  useEffect(() => {\n    if (singerList.size===0)\n        getHotSingerDispatch()\n  }, [])\n  //渲染歌手列表\n  const renderSingerList = () => {\n    const singerListJS = singerList ? singerList.toJS() : []\n    return (\n      <List>\n        {\n          singerListJS.map((item, index) => {\n            return (\n              <ListItem key={item.accountId + \"\" + index}>\n                <div className=\"img_wrapper\">\n                  <LazyLoad placeholder={<img src=\"https://markdownit-images.oss-cn-beijing.aliyuncs.com/music/singer.png\" width=\"100%\" height=\"100%\" alt=\"singers-music\" />}>\n                   <img src={`${item.picUrl}?param=300x300`} width=\"100%\" height=\"100%\" alt=\"singers-music\" />\n                  </LazyLoad>\n                </div>\n                <span className=\"name\">{item.name}</span>\n              </ListItem>\n            )\n          })\n        }\n      </List>\n    )\n  }\n  //处理上拉事件\n  const handlePullUp = () => {\n    pullUpRefreshDispatch(category, alpha, category === \"\", pageCount);\n  }\n  // 处理下拉事件\n  const handlePullDown = () => {\n    pullDownRefreshDispatch(category, alpha);\n  }\n  return (\n    <Data>\n      <NavContainer>\n        <LevelItem\n          list={categoryTypes}\n          title={\"分类(默认热门):\"}\n          handleClick={val => handleUpdateCategory(val)}\n          oldVal={category}\n        > </LevelItem>\n        <LevelItem\n          list={alphaTypes}\n          title={\"首字母：\"}\n          handleClick={val => handleUpdateAlpha(val)}\n          oldVal={alpha}\n        > </LevelItem>\n        <ListContainer>\n          <Scroll\n            pullUp={handlePullUp}\n            pullDown={handlePullDown}\n            pullUpLoading={pullUpLoading}\n            pullDownLoading={pullDownLoading}\n            onScroll={forceCheck}\n          >\n            {renderSingerList()}\n          </Scroll>\n          <Loading show={enterLoading}></Loading>\n        </ListContainer>\n      </NavContainer>\n    </Data>\n  )\n}\n\n// 映射Redux 全局的state到组件的props\nconst mapStateToProps = (state) => ({\n  singerList: state.getIn([\"singers\", \"singerList\"]),\n  enterLoading: state.getIn([\"singers\", \"enterLoading\"]),\n  pullUpLoading: state.getIn([\"singers\", \"pullUpLoading\"]),\n  pullDownLoading: state.getIn([\"singers\", \"pullDownLoading\"]),\n  pageCount: state.getIn([\"singers\", \"pageCount\"]),\n})\n// 映射dispatch 到 props上\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getHotSingerDispatch() {\n      dispatch(getHotSingerList())\n    },\n    updateDispatch(category, alpha) {//更新页面的方法\n      dispatch(changePageCount(0));//由于改变分类，pageCount清零\n      dispatch(changeEnterLoading(true));\n      dispatch(getSingerList(category, alpha));\n    },\n    // 滑到底部时刷新的部分\n    pullUpRefreshDispatch(category, alpha, hot, count) {\n      dispatch(changePullUpLoading(true));\n      dispatch(changePageCount(count + 1));\n      if (hot) {\n        dispatch(refreshMoreHotSingerList());//刷新热门歌手\n      } else {\n        dispatch(refreshMoreSingerList(category, alpha))//刷新分类的列表\n      }\n    },\n    // 顶部下拉的时候刷新\n    pullDownRefreshDispatch(category, alpha) {\n      dispatch(changePullDownLoading(true));\n      dispatch(changePageCount(0));//重新获取数据\n      if (category == \"\" && alpha === \"\") {\n        dispatch(getHotSingerList());\n      } else {\n        dispatch(getSingerList(category, alpha))\n      }\n    }\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Singers));"]},"metadata":{},"sourceType":"module"}